// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	request "github.com/RindangRamadhan/dealls-payslip-system/internal/controller/http/v1/request"
	response "github.com/RindangRamadhan/dealls-payslip-system/internal/controller/http/v1/response"
	entity "github.com/RindangRamadhan/dealls-payslip-system/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUser) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUser)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockUser) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUser)(nil).GetUserByUsername), ctx, username)
}

// MockAttendance is a mock of Attendance interface.
type MockAttendance struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceMockRecorder
}

// MockAttendanceMockRecorder is the mock recorder for MockAttendance.
type MockAttendanceMockRecorder struct {
	mock *MockAttendance
}

// NewMockAttendance creates a new mock instance.
func NewMockAttendance(ctrl *gomock.Controller) *MockAttendance {
	mock := &MockAttendance{ctrl: ctrl}
	mock.recorder = &MockAttendanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendance) EXPECT() *MockAttendanceMockRecorder {
	return m.recorder
}

// SubmitAttendance mocks base method.
func (m *MockAttendance) SubmitAttendance(ctx context.Context, req request.AttendanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockAttendanceMockRecorder) SubmitAttendance(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockAttendance)(nil).SubmitAttendance), ctx, req)
}

// MockAttendancePeriod is a mock of AttendancePeriod interface.
type MockAttendancePeriod struct {
	ctrl     *gomock.Controller
	recorder *MockAttendancePeriodMockRecorder
}

// MockAttendancePeriodMockRecorder is the mock recorder for MockAttendancePeriod.
type MockAttendancePeriodMockRecorder struct {
	mock *MockAttendancePeriod
}

// NewMockAttendancePeriod creates a new mock instance.
func NewMockAttendancePeriod(ctrl *gomock.Controller) *MockAttendancePeriod {
	mock := &MockAttendancePeriod{ctrl: ctrl}
	mock.recorder = &MockAttendancePeriodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendancePeriod) EXPECT() *MockAttendancePeriodMockRecorder {
	return m.recorder
}

// CreateAttendancePeriod mocks base method.
func (m *MockAttendancePeriod) CreateAttendancePeriod(ctx context.Context, req *entity.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockAttendancePeriodMockRecorder) CreateAttendancePeriod(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockAttendancePeriod)(nil).CreateAttendancePeriod), ctx, req)
}

// MockOvertime is a mock of Overtime interface.
type MockOvertime struct {
	ctrl     *gomock.Controller
	recorder *MockOvertimeMockRecorder
}

// MockOvertimeMockRecorder is the mock recorder for MockOvertime.
type MockOvertimeMockRecorder struct {
	mock *MockOvertime
}

// NewMockOvertime creates a new mock instance.
func NewMockOvertime(ctrl *gomock.Controller) *MockOvertime {
	mock := &MockOvertime{ctrl: ctrl}
	mock.recorder = &MockOvertimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvertime) EXPECT() *MockOvertimeMockRecorder {
	return m.recorder
}

// SubmitOvertime mocks base method.
func (m *MockOvertime) SubmitOvertime(ctx context.Context, req request.OvertimeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockOvertimeMockRecorder) SubmitOvertime(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockOvertime)(nil).SubmitOvertime), ctx, req)
}

// MockPayroll is a mock of Payroll interface.
type MockPayroll struct {
	ctrl     *gomock.Controller
	recorder *MockPayrollMockRecorder
}

// MockPayrollMockRecorder is the mock recorder for MockPayroll.
type MockPayrollMockRecorder struct {
	mock *MockPayroll
}

// NewMockPayroll creates a new mock instance.
func NewMockPayroll(ctrl *gomock.Controller) *MockPayroll {
	mock := &MockPayroll{ctrl: ctrl}
	mock.recorder = &MockPayrollMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayroll) EXPECT() *MockPayrollMockRecorder {
	return m.recorder
}

// GetPayrollSummary mocks base method.
func (m *MockPayroll) GetPayrollSummary(ctx context.Context, periodID uuid.UUID) (*response.PayrollSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollSummary", ctx, periodID)
	ret0, _ := ret[0].(*response.PayrollSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollSummary indicates an expected call of GetPayrollSummary.
func (mr *MockPayrollMockRecorder) GetPayrollSummary(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollSummary", reflect.TypeOf((*MockPayroll)(nil).GetPayrollSummary), ctx, periodID)
}

// ProcessPayroll mocks base method.
func (m *MockPayroll) ProcessPayroll(ctx context.Context, periodID, userID uuid.UUID) (*entity.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayroll", ctx, periodID, userID)
	ret0, _ := ret[0].(*entity.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayroll indicates an expected call of ProcessPayroll.
func (mr *MockPayrollMockRecorder) ProcessPayroll(ctx, periodID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayroll", reflect.TypeOf((*MockPayroll)(nil).ProcessPayroll), ctx, periodID, userID)
}

// MockPayslip is a mock of Payslip interface.
type MockPayslip struct {
	ctrl     *gomock.Controller
	recorder *MockPayslipMockRecorder
}

// MockPayslipMockRecorder is the mock recorder for MockPayslip.
type MockPayslipMockRecorder struct {
	mock *MockPayslip
}

// NewMockPayslip creates a new mock instance.
func NewMockPayslip(ctrl *gomock.Controller) *MockPayslip {
	mock := &MockPayslip{ctrl: ctrl}
	mock.recorder = &MockPayslipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayslip) EXPECT() *MockPayslipMockRecorder {
	return m.recorder
}

// GetPayslip mocks base method.
func (m *MockPayslip) GetPayslip(ctx context.Context, userID, periodID uuid.UUID) (*response.PayslipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslip", ctx, userID, periodID)
	ret0, _ := ret[0].(*response.PayslipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslip indicates an expected call of GetPayslip.
func (mr *MockPayslipMockRecorder) GetPayslip(ctx, userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslip", reflect.TypeOf((*MockPayslip)(nil).GetPayslip), ctx, userID, periodID)
}

// MockReimbursement is a mock of Reimbursement interface.
type MockReimbursement struct {
	ctrl     *gomock.Controller
	recorder *MockReimbursementMockRecorder
}

// MockReimbursementMockRecorder is the mock recorder for MockReimbursement.
type MockReimbursementMockRecorder struct {
	mock *MockReimbursement
}

// NewMockReimbursement creates a new mock instance.
func NewMockReimbursement(ctrl *gomock.Controller) *MockReimbursement {
	mock := &MockReimbursement{ctrl: ctrl}
	mock.recorder = &MockReimbursementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReimbursement) EXPECT() *MockReimbursementMockRecorder {
	return m.recorder
}

// SubmitReimbursement mocks base method.
func (m *MockReimbursement) SubmitReimbursement(ctx context.Context, req request.ReimbursementRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockReimbursementMockRecorder) SubmitReimbursement(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockReimbursement)(nil).SubmitReimbursement), ctx, req)
}
