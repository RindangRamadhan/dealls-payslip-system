// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/RindangRamadhan/dealls-payslip-system/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// GetAllEmployees mocks base method.
func (m *MockUserRepo) GetAllEmployees(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockUserRepoMockRecorder) GetAllEmployees(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockUserRepo)(nil).GetAllEmployees), ctx)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepo) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepoMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUsername), ctx, username)
}

// MockAttendancePeriodRepo is a mock of AttendancePeriodRepo interface.
type MockAttendancePeriodRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAttendancePeriodRepoMockRecorder
}

// MockAttendancePeriodRepoMockRecorder is the mock recorder for MockAttendancePeriodRepo.
type MockAttendancePeriodRepoMockRecorder struct {
	mock *MockAttendancePeriodRepo
}

// NewMockAttendancePeriodRepo creates a new mock instance.
func NewMockAttendancePeriodRepo(ctrl *gomock.Controller) *MockAttendancePeriodRepo {
	mock := &MockAttendancePeriodRepo{ctrl: ctrl}
	mock.recorder = &MockAttendancePeriodRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendancePeriodRepo) EXPECT() *MockAttendancePeriodRepoMockRecorder {
	return m.recorder
}

// CreateAttendancePeriod mocks base method.
func (m *MockAttendancePeriodRepo) CreateAttendancePeriod(ctx context.Context, period *entity.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", ctx, period)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockAttendancePeriodRepoMockRecorder) CreateAttendancePeriod(ctx, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockAttendancePeriodRepo)(nil).CreateAttendancePeriod), ctx, period)
}

// GetActivePeriod mocks base method.
func (m *MockAttendancePeriodRepo) GetActivePeriod(ctx context.Context) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePeriod", ctx)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePeriod indicates an expected call of GetActivePeriod.
func (mr *MockAttendancePeriodRepoMockRecorder) GetActivePeriod(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePeriod", reflect.TypeOf((*MockAttendancePeriodRepo)(nil).GetActivePeriod), ctx)
}

// GetPeriodByID mocks base method.
func (m *MockAttendancePeriodRepo) GetPeriodByID(ctx context.Context, id uuid.UUID) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeriodByID", ctx, id)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeriodByID indicates an expected call of GetPeriodByID.
func (mr *MockAttendancePeriodRepoMockRecorder) GetPeriodByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeriodByID", reflect.TypeOf((*MockAttendancePeriodRepo)(nil).GetPeriodByID), ctx, id)
}

// MockAttendanceRepo is a mock of AttendanceRepo interface.
type MockAttendanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepoMockRecorder
}

// MockAttendanceRepoMockRecorder is the mock recorder for MockAttendanceRepo.
type MockAttendanceRepoMockRecorder struct {
	mock *MockAttendanceRepo
}

// NewMockAttendanceRepo creates a new mock instance.
func NewMockAttendanceRepo(ctrl *gomock.Controller) *MockAttendanceRepo {
	mock := &MockAttendanceRepo{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepo) EXPECT() *MockAttendanceRepoMockRecorder {
	return m.recorder
}

// CreateAttendance mocks base method.
func (m *MockAttendanceRepo) CreateAttendance(ctx context.Context, attendance *entity.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendance", ctx, attendance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendance indicates an expected call of CreateAttendance.
func (mr *MockAttendanceRepoMockRecorder) CreateAttendance(ctx, attendance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendance", reflect.TypeOf((*MockAttendanceRepo)(nil).CreateAttendance), ctx, attendance)
}

// GetAttendanceByDate mocks base method.
func (m *MockAttendanceRepo) GetAttendanceByDate(ctx context.Context, userID, periodID uuid.UUID, date time.Time) (*entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendanceByDate", ctx, userID, periodID, date)
	ret0, _ := ret[0].(*entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendanceByDate indicates an expected call of GetAttendanceByDate.
func (mr *MockAttendanceRepoMockRecorder) GetAttendanceByDate(ctx, userID, periodID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendanceByDate", reflect.TypeOf((*MockAttendanceRepo)(nil).GetAttendanceByDate), ctx, userID, periodID, date)
}

// GetAttendanceByUserAndPeriod mocks base method.
func (m *MockAttendanceRepo) GetAttendanceByUserAndPeriod(ctx context.Context, userID, periodID uuid.UUID) ([]entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendanceByUserAndPeriod", ctx, userID, periodID)
	ret0, _ := ret[0].([]entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendanceByUserAndPeriod indicates an expected call of GetAttendanceByUserAndPeriod.
func (mr *MockAttendanceRepoMockRecorder) GetAttendanceByUserAndPeriod(ctx, userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendanceByUserAndPeriod", reflect.TypeOf((*MockAttendanceRepo)(nil).GetAttendanceByUserAndPeriod), ctx, userID, periodID)
}

// UpdateCheckOut mocks base method.
func (m *MockAttendanceRepo) UpdateCheckOut(ctx context.Context, attendanceID uuid.UUID, checkOutTime time.Time, updatedBy uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckOut", ctx, attendanceID, checkOutTime, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheckOut indicates an expected call of UpdateCheckOut.
func (mr *MockAttendanceRepoMockRecorder) UpdateCheckOut(ctx, attendanceID, checkOutTime, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckOut", reflect.TypeOf((*MockAttendanceRepo)(nil).UpdateCheckOut), ctx, attendanceID, checkOutTime, updatedBy)
}

// MockOvertimeRepo is a mock of OvertimeRepo interface.
type MockOvertimeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOvertimeRepoMockRecorder
}

// MockOvertimeRepoMockRecorder is the mock recorder for MockOvertimeRepo.
type MockOvertimeRepoMockRecorder struct {
	mock *MockOvertimeRepo
}

// NewMockOvertimeRepo creates a new mock instance.
func NewMockOvertimeRepo(ctrl *gomock.Controller) *MockOvertimeRepo {
	mock := &MockOvertimeRepo{ctrl: ctrl}
	mock.recorder = &MockOvertimeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvertimeRepo) EXPECT() *MockOvertimeRepoMockRecorder {
	return m.recorder
}

// CreateOvertime mocks base method.
func (m *MockOvertimeRepo) CreateOvertime(ctx context.Context, overtime *entity.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOvertime", ctx, overtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOvertime indicates an expected call of CreateOvertime.
func (mr *MockOvertimeRepoMockRecorder) CreateOvertime(ctx, overtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOvertime", reflect.TypeOf((*MockOvertimeRepo)(nil).CreateOvertime), ctx, overtime)
}

// GetOvertimeByUserAndPeriod mocks base method.
func (m *MockOvertimeRepo) GetOvertimeByUserAndPeriod(ctx context.Context, userID, periodID uuid.UUID) ([]entity.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOvertimeByUserAndPeriod", ctx, userID, periodID)
	ret0, _ := ret[0].([]entity.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOvertimeByUserAndPeriod indicates an expected call of GetOvertimeByUserAndPeriod.
func (mr *MockOvertimeRepoMockRecorder) GetOvertimeByUserAndPeriod(ctx, userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOvertimeByUserAndPeriod", reflect.TypeOf((*MockOvertimeRepo)(nil).GetOvertimeByUserAndPeriod), ctx, userID, periodID)
}

// GetTotalOvertimeByUserAndDate mocks base method.
func (m *MockOvertimeRepo) GetTotalOvertimeByUserAndDate(ctx context.Context, userID uuid.UUID, date time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalOvertimeByUserAndDate", ctx, userID, date)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalOvertimeByUserAndDate indicates an expected call of GetTotalOvertimeByUserAndDate.
func (mr *MockOvertimeRepoMockRecorder) GetTotalOvertimeByUserAndDate(ctx, userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalOvertimeByUserAndDate", reflect.TypeOf((*MockOvertimeRepo)(nil).GetTotalOvertimeByUserAndDate), ctx, userID, date)
}

// MockReimbursementRepo is a mock of ReimbursementRepo interface.
type MockReimbursementRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReimbursementRepoMockRecorder
}

// MockReimbursementRepoMockRecorder is the mock recorder for MockReimbursementRepo.
type MockReimbursementRepoMockRecorder struct {
	mock *MockReimbursementRepo
}

// NewMockReimbursementRepo creates a new mock instance.
func NewMockReimbursementRepo(ctrl *gomock.Controller) *MockReimbursementRepo {
	mock := &MockReimbursementRepo{ctrl: ctrl}
	mock.recorder = &MockReimbursementRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReimbursementRepo) EXPECT() *MockReimbursementRepoMockRecorder {
	return m.recorder
}

// CreateReimbursement mocks base method.
func (m *MockReimbursementRepo) CreateReimbursement(ctx context.Context, reimbursement *entity.Reimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReimbursement", ctx, reimbursement)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReimbursement indicates an expected call of CreateReimbursement.
func (mr *MockReimbursementRepoMockRecorder) CreateReimbursement(ctx, reimbursement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReimbursement", reflect.TypeOf((*MockReimbursementRepo)(nil).CreateReimbursement), ctx, reimbursement)
}

// GetReimbursementsByUserAndPeriod mocks base method.
func (m *MockReimbursementRepo) GetReimbursementsByUserAndPeriod(ctx context.Context, userID, periodID uuid.UUID) ([]entity.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReimbursementsByUserAndPeriod", ctx, userID, periodID)
	ret0, _ := ret[0].([]entity.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReimbursementsByUserAndPeriod indicates an expected call of GetReimbursementsByUserAndPeriod.
func (mr *MockReimbursementRepoMockRecorder) GetReimbursementsByUserAndPeriod(ctx, userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReimbursementsByUserAndPeriod", reflect.TypeOf((*MockReimbursementRepo)(nil).GetReimbursementsByUserAndPeriod), ctx, userID, periodID)
}

// MockPayrollRepo is a mock of PayrollRepo interface.
type MockPayrollRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPayrollRepoMockRecorder
}

// MockPayrollRepoMockRecorder is the mock recorder for MockPayrollRepo.
type MockPayrollRepoMockRecorder struct {
	mock *MockPayrollRepo
}

// NewMockPayrollRepo creates a new mock instance.
func NewMockPayrollRepo(ctrl *gomock.Controller) *MockPayrollRepo {
	mock := &MockPayrollRepo{ctrl: ctrl}
	mock.recorder = &MockPayrollRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayrollRepo) EXPECT() *MockPayrollRepoMockRecorder {
	return m.recorder
}

// CheckPayrollExists mocks base method.
func (m *MockPayrollRepo) CheckPayrollExists(ctx context.Context, periodID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPayrollExists", ctx, periodID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPayrollExists indicates an expected call of CheckPayrollExists.
func (mr *MockPayrollRepoMockRecorder) CheckPayrollExists(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPayrollExists", reflect.TypeOf((*MockPayrollRepo)(nil).CheckPayrollExists), ctx, periodID)
}

// CreatePayroll mocks base method.
func (m *MockPayrollRepo) CreatePayroll(ctx context.Context, payroll *entity.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayroll", ctx, payroll)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayroll indicates an expected call of CreatePayroll.
func (mr *MockPayrollRepoMockRecorder) CreatePayroll(ctx, payroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayroll", reflect.TypeOf((*MockPayrollRepo)(nil).CreatePayroll), ctx, payroll)
}

// GetPayrollByPeriod mocks base method.
func (m *MockPayrollRepo) GetPayrollByPeriod(ctx context.Context, periodID uuid.UUID) (*entity.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollByPeriod", ctx, periodID)
	ret0, _ := ret[0].(*entity.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollByPeriod indicates an expected call of GetPayrollByPeriod.
func (mr *MockPayrollRepoMockRecorder) GetPayrollByPeriod(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollByPeriod", reflect.TypeOf((*MockPayrollRepo)(nil).GetPayrollByPeriod), ctx, periodID)
}

// UpdateTotalAmountPayroll mocks base method.
func (m *MockPayrollRepo) UpdateTotalAmountPayroll(ctx context.Context, id uuid.UUID, totalAmount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalAmountPayroll", ctx, id, totalAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalAmountPayroll indicates an expected call of UpdateTotalAmountPayroll.
func (mr *MockPayrollRepoMockRecorder) UpdateTotalAmountPayroll(ctx, id, totalAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalAmountPayroll", reflect.TypeOf((*MockPayrollRepo)(nil).UpdateTotalAmountPayroll), ctx, id, totalAmount)
}

// MockPayslipRepo is a mock of PayslipRepo interface.
type MockPayslipRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPayslipRepoMockRecorder
}

// MockPayslipRepoMockRecorder is the mock recorder for MockPayslipRepo.
type MockPayslipRepoMockRecorder struct {
	mock *MockPayslipRepo
}

// NewMockPayslipRepo creates a new mock instance.
func NewMockPayslipRepo(ctrl *gomock.Controller) *MockPayslipRepo {
	mock := &MockPayslipRepo{ctrl: ctrl}
	mock.recorder = &MockPayslipRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayslipRepo) EXPECT() *MockPayslipRepoMockRecorder {
	return m.recorder
}

// CreatePayslip mocks base method.
func (m *MockPayslipRepo) CreatePayslip(ctx context.Context, payslip *entity.Payslip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayslip", ctx, payslip)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayslip indicates an expected call of CreatePayslip.
func (mr *MockPayslipRepoMockRecorder) CreatePayslip(ctx, payslip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayslip", reflect.TypeOf((*MockPayslipRepo)(nil).CreatePayslip), ctx, payslip)
}

// GetPayslipByUserAndPayroll mocks base method.
func (m *MockPayslipRepo) GetPayslipByUserAndPayroll(ctx context.Context, userID, payrollID uuid.UUID) (*entity.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslipByUserAndPayroll", ctx, userID, payrollID)
	ret0, _ := ret[0].(*entity.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslipByUserAndPayroll indicates an expected call of GetPayslipByUserAndPayroll.
func (mr *MockPayslipRepoMockRecorder) GetPayslipByUserAndPayroll(ctx, userID, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslipByUserAndPayroll", reflect.TypeOf((*MockPayslipRepo)(nil).GetPayslipByUserAndPayroll), ctx, userID, payrollID)
}

// GetPayslipsByPayroll mocks base method.
func (m *MockPayslipRepo) GetPayslipsByPayroll(ctx context.Context, payrollID uuid.UUID) ([]entity.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslipsByPayroll", ctx, payrollID)
	ret0, _ := ret[0].([]entity.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslipsByPayroll indicates an expected call of GetPayslipsByPayroll.
func (mr *MockPayslipRepoMockRecorder) GetPayslipsByPayroll(ctx, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslipsByPayroll", reflect.TypeOf((*MockPayslipRepo)(nil).GetPayslipsByPayroll), ctx, payrollID)
}

// MockAuditLogRepo is a mock of AuditLogRepo interface.
type MockAuditLogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogRepoMockRecorder
}

// MockAuditLogRepoMockRecorder is the mock recorder for MockAuditLogRepo.
type MockAuditLogRepoMockRecorder struct {
	mock *MockAuditLogRepo
}

// NewMockAuditLogRepo creates a new mock instance.
func NewMockAuditLogRepo(ctrl *gomock.Controller) *MockAuditLogRepo {
	mock := &MockAuditLogRepo{ctrl: ctrl}
	mock.recorder = &MockAuditLogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogRepo) EXPECT() *MockAuditLogRepoMockRecorder {
	return m.recorder
}

// CreateAuditLog mocks base method.
func (m *MockAuditLogRepo) CreateAuditLog(ctx context.Context, log *entity.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLog", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuditLog indicates an expected call of CreateAuditLog.
func (mr *MockAuditLogRepoMockRecorder) CreateAuditLog(ctx, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLog", reflect.TypeOf((*MockAuditLogRepo)(nil).CreateAuditLog), ctx, log)
}
